/* _f is assumed to be analytic in D_r^*(_a)for some r */

residue_m(_f, _z, _a) := block(
ratprint: false,
[res, lim],
lim: limit(abs(_f), _z, _a),
/* if we have a pole of order k at _a, we use residue_lim() */
if is(member(infinity, list(lim))) or is(member(inf, list(lim))) or is(member(minf, list(lim)))
  then res: residue_lim(_f, _z, _a)
  /* else if we have an essential singularity at _a, we use residue_powerseries() */
  else if (is(member(ind, list(lim)))) or (is(member(und, list(lim))))
    then res: residue_powerseries(_f, _z, _a)
    /* else we use the original residue() */
    else
    res: residue(_f, _z, _a),
return(res)
);


/* largest order to check */
define_variable(nmax, 10, integer);


residue_lim(_f,_z,_a):=block(
[j,res,big,l],
big:1000000,
l:for j:1 thru nmax do (
    /* display(j), */ 
    res:limit(diff((_z-_a)^j*_f,_z,j-1),_z,_a)/(j-1)!,
    if abs(res)<big then return(res)),
if is(equal(l, done)) 
  then return("The pole is of large order, please check and reset nmax and try again"),
return(l)
);


residue_powerseries(_f,_z,_a):=block(
[s,sp,ai,n,nn,ff],
ref:0,
s:powerseries(_f,_z,_a),
sp:niceindices(s),
ai:part(sp,1), /*this assumes that powerseries is self-contained, with no prefactors*/
n:hipow(ai,z),
nn:solve(n=-1),
ff:is(round(part(nn,1,2))=part(nn,1,2)), /* ?? integer that gives 1/(z-a) term ??*/
if (ff) then ref:(_z-_a)*subst(nn,ai),
ref
);
