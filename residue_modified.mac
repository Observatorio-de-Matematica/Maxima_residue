/* _f is assumed to be analytic in D_r^*(_a)for some r */

residue_m(_f, _z, _a) := block(
ratprint: false,
[res, lim],
lim: limit(abs(_f), _z, _a),
/* if we have an essential singularity at _a, we use residue_powerseries() */
if undefinedp(lim)
  then res: residue_powerseries(_f, _z, _a)
  /* else we try the original residue() */
  else block(
    [], 
    lis: errcatch(residue(_f, _z, _a)),
    /* if residue() fails, we use residue_lim */
    if emptyp(lis)
      then res: residue_lim(_f, _z, _a)
      else block(
        [],
        res: first(lis),
        if is(equal(res, 0)) and infinitep(lim)
          then res: residue_lim(_f, _z, _a))),
res
);


infinitep(_e) := block(
[],
if atom(_e)
  then return(is(equal(_e, infinity) or equal(_e, inf) or equal(_e, minf)))
  else return(is(member(infinity, args(_e)) or member(inf, args(_e)) or member(minf, args(_e))))
);


undefinedp(_e) := block(
[],
if atom(_e)
  then return(is(member(ind, list(_e)) or member(und, list(_e))))
  else return(is(member(ind, args(_e)) or member(und, args(_e))))
);


/* largest order to check */
define_variable(residue_max_pole_order, 10, integer);


residue_lim(_f,_z,_a):=block(
[j,res,l],
l:for j:1 thru residue_max_pole_order do (
    /* display(j), */
    res:limit(diff((_z-_a)^j*_f,_z,j-1),_z,_a)/(j-1)!,
    if not infinitep(res) then return(res)),
if is(equal(l, done)) 
  then return("The pole is of large order, please check and reset residue_max_pole_order and try again"),
return(l)
);


residue_powerseries(_f,_z,_a):=block(
[s,sp,ai,n,nn,ff],
ref:0,
s:powerseries(_f,_z,_a),
sp:niceindices(s),
ai:part(sp,1), /*this assumes that powerseries is self-contained, with no prefactors*/
n:hipow(ai,z),
nn:solve(n=-1),
ff:is(round(part(nn,1,2))=part(nn,1,2)), /* ?? integer that gives 1/(z-a) term ??*/
if (ff) then ref:(_z-_a)*subst(nn,ai),
ref
);


expp(_f) := is(equal(op(_f), "^")) and is(equal(first(args(_f)), %e));


residue_taylor_single_term(_f, _z, _a) := block(
[list_of_ops, optr, res],
list_of_ops: [sin, cos, tan],
if expp(_f)
  then optr: exp
  else optr: op(_f),
if is(member(optr, list_of_ops) or equal(optr, exp))
    then block(
    [arg, s, sz],
    arg: last(args(_f)),
    s: taylor(optr(_z), _z, _a, 10),
    sz: subst(_z = arg, s),
    res: coeff(sz, _z-_a, -1)
    ),
res
);